# 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

spisok = [5, "строка", [0.4, {85, "слово"}], ("слово", 76, 54.86), {"ключ": "значение"}, {54.21, }]

for i in range(len(spisok)):
    print(spisok[i], " тип %s" % type(spisok[i]))

# 2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().


sp = list(input("Введите последовательность символов: "))
print(sp)
sr1 = sp[::2]
sr2 = sp[1::2]

for i in range(int(len(sp) / 2)):
    sp[i * 2] = sr2[i]
    sp[i * 2 + 1] = sr1[i]
print(sp)

# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.


# Решение через list:

vr_god = ["зима", "весна", "лето", "осень"]
month = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

m = int(input("Введите номер месяца целым положительным числом (от 1 до 12): "))

while m not in month:
    print("Вы ввели неверное значение!")
    m = int(input("Введите номер месяца целым положительным числом (от 1 до 12): "))
else:

    for i in range(len(vr_god)):
        mon = month[(i * int(len(month) / len(vr_god))):(i * int(len(month) / len(vr_god)) + 3)]
        print(i)
        print(mon)
        print(bool(m in mon))
        if m in mon:
            print("Введенный месяц относится к времени года", vr_god[i])
            m = -1
            break

# Решение через dict:

m = int(input("Введите номер месяца целым положительным числом (от 1 до 12): "))
vr_god = ["зима", "весна", "лето", "осень"]
month = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
dict = {}
while m not in month:
    print("Вы ввели неверное значение!")
    m = int(input("Введите номер месяца целым положительным числом (от 1 до 12): "))
else:
    for i in range(len(month)):
        dict[month[i]] = vr_god[i // 3]
    print("Введенный месяц относится к времени года", dict[m])

# 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки.
# Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.

st0 = input("Введите строку из нескольких слов, разделенных пробелами: ")
st = st0.split(" ")

for i in range(len(st)):
    if len(st[i]) > 10:
        print(f"{i + 1}. ", st[i][:10])
    else:
        print(f"{i + 1}. ", st[i])

# 5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
print(my_list)
sym_to_l = input("Введите натуральное число: ")
if int(sym_to_l) not in my_list:
    for i in range(len(my_list)):
        if int(sym_to_l) < my_list[::-1][i]:
            my_list.insert(len(my_list) - i, int(sym_to_l))
            break
        elif i == len(my_list) - 1:
            my_list.insert(0, int(sym_to_l))
else:
    my_list.insert(my_list[:].index(int(sym_to_l)), int(sym_to_l))
print(my_list)

# 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь
# с параметрами, то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.

# Пример готовой структуры:

# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, название.
# Тогда значение — список значений-характеристик, например, список названий товаров.

# Пример:

# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

zn_har = {}
dic = {}
sp = []
sp_dic = []
tov = 3
har = 4
kl_sl_skl = ("название", "цену", "количество", "единицу измерения")
kl_sl = ["название", "цена", "количество", "ед"]
for i in range(tov):
    for j in range(har):
        zn_har[kl_sl[j]] = input(f"Введите {kl_sl_skl[j]} {i + 1}-го товара: ")
    sp.append(tuple((i, zn_har)))
    zn_har = zn_har.copy()
    print(sp[i])
print(sp)

for j in range(har):
    for i in range(tov):
        if sp[i][1].setdefault(kl_sl[j]) not in sp_dic:
            sp_dic.append(sp[i][1].setdefault(kl_sl[j]))
    dic[kl_sl[j]] = sp_dic.copy()
    sp_dic.clear()
print(dic)