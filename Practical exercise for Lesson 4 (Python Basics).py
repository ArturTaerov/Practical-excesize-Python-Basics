#1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
#Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
#Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.




# 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.

# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].


def generator(sp):
    """ Из данного списка чисел выбирает те, значения которых больше предыдущего
	и возвращает новый список отобранных чисел."""
    x = []
    for i in range(len(sp)-1):
        if sp[i] < sp[i+1]:
            x.append(sp[i+1])
    yield x


sp = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = generator(sp)
for j in result:
    print(j)


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
#Решите задание в одну строку.

#Подсказка: используйте функцию range() и генератор.

w = [x for x in range(20, 241) if (x%20 == 0) or (x%21 == 0)]
print(w)


#4.Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке.
# Для выполнения задания обязательно используйте генератор.

# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

sp = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
sp_res = [x for x in sp if sp.count(x) == 1]
print(sp_res)



#5. Реализовать формирование списка, используя функцию range() и
# возможности генератора.
# В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.

# Подсказка: использовать функцию reduce().    

from functools import reduce
def mult (prev_el, el):
    """ Принимает два позиционных аргумента и возвращает их произведение."""
    return prev_el*el

w = [x for x in range(100, 1001) if x%2==0]

print("Список четных чисел от 100 до 1000: ", w)
result = reduce(mult, w)
print("Результат произведения четных чисел от 100 до 1000: ", result)


# 6. Реализовать два небольших скрипта:

# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. 
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Предусмотрите условие его завершения. #### Например, в первом задании
# выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение
# элементов списка прекратится.

from sys import argv
from itertools import count

scr1, ln, ln_gl = argv 

for i in count(int(ln)):
    if i > int(ln_gl):
        break
    else:
        print (i)



from sys import argv
from itertools import cycle

scr2, ln2 = argv

sp = [5, 1, 7, 4, 3, 8]
        
j = 0
for i in cycle(sp):
    if j > int(ln2):
        break
    print(i)
    j+= 1


#7. Реализовать генератор с помощью функции с ключевым словом yield, создающим
# очередное значение. При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа.
#В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.

# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fact(m):
    """ Принимает натуральное число и возвращает его факториал."""
    sp_nf = [1]
    for j in range(1, m):
        sp_nf.append(sp_nf[j-1]*(j+1))
    yield sp_nf

n = 5
for el in fact(n):
    for i in range(n):
        print(el[i])






    
